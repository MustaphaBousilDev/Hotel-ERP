version: '3'
services:
  reservations:
    image: reservations
    build:
      context: .
      # dockerfile: ./apps/reservations/Dockerfile
      args:
        - APP=reservations
      target: development
    restart: always
      
    command: npm run start:dev reservations
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/reservations/.env
    ports:
      - '5000:5000'
    depends_on:
      #- redis
      - rabbitmq
    container_name: reservations
    # volumes:
    #   - .:/usr/src/app
  auth:
    image: auth
    build:
      context: .
      # dockerfile: ./apps/auth/Dockerfile
      args:
        - APP=auth
      target: development
    restart: always
    command: npm run start:dev auth
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/auth/.env
    ports:
      - '5001:5001'
    depends_on:
      #- redis
      - rabbitmq
    container_name: auth
    # volumes: 
    #   - .:/usr/src/app
  payments:
    image: payments
    build:
      context: .
      # dockerfile: ./apps/payments/Dockerfile
      args:
        - APP=payments
      target: development
    restart: always
    command: npm run start:dev payments
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/payments/.env
    depends_on:
      #- redis
      - rabbitmq
    # ports:
    #   - '5003:5003'
    # volumes: 
    #   - .:/usr/src/app
    container_name: payments
  notifications:
    image: notifications
    build:
      context: .
      # dockerfile: ./apps/notifications/Dockerfile
      args:
        - APP=notifications
      target: development
    restart: always
    command: npm run start:dev notifications
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/notifications/.env
    depends_on:
      #- redis
      - rabbitmq
    # volumes: 
    #   - .:/usr/src/app
    container_name: notifications
  redis:
    image: "redis:7-alpine"
    ports:
      - 6379
    depends_on:
      - rabbitmq
    # volumes: 
    #   - .:/usr/src/app
    container_name: redis
  rabbitmq:
    image: rabbitmq 
    ports:
      - 5672:5672
    container_name: rabbitmq
  gateway:
    image: gateway
    build:
      context: .
      # dockerfile: ./apps/notifications/Dockerfile
      args:
        - APP=gateway
      target: development
    command: npm run start:dev gateway
    # command: npm run start:dev gateway
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/gateway/.env
    # depends_on:
    #   #- redis
    #   - rabbitmq
    #   - reservations
    #   - auth
    #   - payments
    #   - notifications
    #   - redis
    #   - organization
    # volumes: 
    #   - .:/usr/src/app
    container_name: gateway
    ports:
      - 5007:5007
    restart: "on-failure"
  organization:
    image: organization
    build:
      context: .
      # dockerfile: ./apps/notifications/Dockerfile
      args:
        - APP=organization
      target: development
    command: npm run start:dev organization
    env_file:
      - ./apps/organization/.env
    ports:
      - '5006:5006'
    depends_on:
      #- redis 
      - rabbitmq
    # volumes: 
    #   - .:/usr/src/app
    #   - /usr/src/app/node_modules
    container_name: organization
  s3:
    image: s3
    build: 
      context: .
      # dockerfile: ./apps/s3/Dockerfile
      args:
        - APP=s3
      target: development
    command: npm run start:dev s3 
    env_file:
      - ./apps/s3/.env 
    ports:
      - '5008:5008'
    depends_on:
      - rabbitmq
    # volumes: 
    #   - .:/usr/src/app
    container_name: s3
  tasks:
    image: tasks 
    build:
      context: .
      args:
        - APP=tasks 
      target: development
    command: npm run start:dev tasks 
    env_file:
      - ./apps/tasks/.env
    ports:
      - '5009:5009'
    depends_on:
      - rabbitmq
    container_name: tasks

  # db:
  #   image: mysql 
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: example
  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080
    # ports:
    #   - '5004:5004'
    # volumes: 
    #   - .:/usr/src/app
  # mongo:
  #   image: mongo
  # postgres:
  #   image: postgres
  #   ports:
  #     - '5432:5432'
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: productServiceDB
  #   volumes:
  #     - ./db-data/product-db:/var/lib/postgresql/data
  # pgadmin: 
    # image: dpage/pgadmin4
    # environment:
    #   PGADMIN_DEFAULT_EMAIL: admin@example.com
    #   PGADMIN_DEFAULT_PASSWORD: admin
    # ports:
    #   - "5050:80"