services:
  reservations:
    build:
      context: .
      dockerfile: ./apps/reservations/Dockerfile
      target: development
    command: npm run start:dev reservations
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/reservations/.env
    ports:
      - '5000:5000'
    # volumes:
    #   - .:/usr/src/app
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/auth/.env
    ports:
      - '5001:5001'
    # volumes: 
    #   - .:/usr/src/app
  payments:
    build:
      context: .
      dockerfile: ./apps/payments/Dockerfile
      target: development
    command: npm run start:dev payments
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/payments/.env
    # ports:
    #   - '5003:5003'
    # volumes: 
    #   - .:/usr/src/app
  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    command: npm run start:dev notifications
    #if each microservice has own envirement vairiable
    env_file:
      - ./apps/notifications/.env
  # db:
  #   image: mysql 
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: example
  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080
    # ports:
    #   - '5004:5004'
    # volumes: 
    #   - .:/usr/src/app
  mongo:
    image: mongo
  # postgres:
  #   image: postgres
  #   ports:
  #     - '5432:5432'
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: productServiceDB
  #   volumes:
  #     - ./db-data/product-db:/var/lib/postgresql/data
  # pgadmin: 
    # image: dpage/pgadmin4
    # environment:
    #   PGADMIN_DEFAULT_EMAIL: admin@example.com
    #   PGADMIN_DEFAULT_PASSWORD: admin
    # ports:
    #   - "5050:80"